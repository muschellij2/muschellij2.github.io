games$times[grepl("Injury within", games$times, fixed=TRUE)] <- ""#
games$times[grepl("imeout", games$times, fixed=TRUE)] <- ""#
#
ncg2 <- nchar(games$times)#
#
if (!all(ncg2 %in% c(0, 4, 5))) stop("nchar is wrong for some")
ncg2
fours <- ncg2==4#
ftime <- substr(games$times[fours], 1, 1)#
if (!all(ftime %in% 1:9)) stop("Odd Times")#
games$times[fours] <- paste("0", games$times[fours], sep="")#
## make the first play minute 15#
maketimes <- unlist(t(tapply(games$times, list(games$gameid, games$qs), function(x) {#
x[1] <- "15:00"#
x#
})))
head(games)
games$times[games$times == ""] <- maketimes[games$times == ""]#
#
games$times[games$times == ""] <- NA#
games$times <- na.locf(games$times, na.rm=FALSE)#
games$times[is.na(games$times)] <- ""
head(games)
games$min <- as.numeric(substr(games$times, 1, 2))#
games$sec <- as.numeric(substr(games$times, 4, 5))#
if (any(is.na(games$sec) & games$times != "")) stop("Seconds are off")#
if (any(is.na(games$min) & games$times != "")) stop("Minutes are off")#
if (any(!is.na(games$sec) & is.na(games$min))) stop("Min/Sec off")#
if (any(!is.na(games$min) & is.na(games$sec))) stop("Sec/Min off")
head(games)
if (any( games$min > 15 | games$sec > 60)) stop("Sec/Min out of range")
games$down[games$down %in% 0] <- NA#
table(games$down[!grepl("^[1-4]-(\\d|\\d\\d)-", games$vals)])#
games$down[!grepl("^[1-4]-(\\d|\\d\\d)-", games$vals) & !(games$down %in% 1:4)] <- NA#
games$togo[!grepl("^[1-4]-(\\d|\\d\\d)-", games$vals) & !(games$down %in% 1:4)] <- NA#
head(games$vals[!grepl("^[1-4]-(\\d|\\d\\d)-", games$vals) & !(games$down %in% 1:4)], 20)#
#
games$vals <- gsub("Meriweather", "Merizzzz", games$vals)#
games$vals <- gsub("A.Weathers", "A.Zzzzs", games$vals, fixed=TRUE)#
games$vals <- gsub("Weatherington", "Zzzzington", games$vals, fixed=TRUE)#
games$vals <- gsub("Weatherford", "Zzzzford", games$vals, fixed=TRUE)#
games$vals <- gsub("Weatherspoon", "Zzzzspoon", games$vals, fixed=TRUE)#
#
phrases <- c("check weather", "Update on the weather: Snow began to fall.", "(Halftime weather:  76 degrees; 38% humidity; wind west at 15.)", "Weather begins to drizzle", "Weather at half 60 degrees, 17% humidity, Wind West at 22 MPH", "Weather at half: 60 degrees, 17% humidity, Wind West at 22 MPH")#
for (iphrase in phrases){#
games$vals <- str_trim(gsub(iphrase, "", games$vals, fixed=TRUE))#
games$newvals <- str_trim(gsub(iphrase, "", games$newvals, fixed=TRUE))#
}#
if (any(grepl("[W|w]eather", games$vals))) stop("Error - weather reports still there")#
#games <- games[!grepl("weather", games$vals),]#
games$vals <- gsub("Merizzzz", "Meriweather", games$vals)#
games$vals <- gsub("Zzzz", "Weather", games$vals, fixed=TRUE)#
games$vals <- gsub("zzzz", "weather", games$vals, fixed=TRUE)#
#
games$newvals <- gsub("(\\d)?\\d\\-", "", games$newvals)#
games$nn <- NULL#
stop("HERE")#
games$absmin <- games$min + (15)*(4-games$qs)
head(games)
addat <- addat[!grepl("^\\d[st|rd|th] Quarter$", addat$vals),]#
pat <- "(.*) at [0-1][0-9]:[0-5][0-9]$"#
havepat <- grepl(pat, addat$vals)
addat <- games[!grepl("^\\d[st|rd|th] Quarter$", games$vals),]#
pat <- "(.*) at [0-1][0-9]:[0-5][0-9]$"#
havepat <- grepl(pat, games$vals)
head(havepat)
head(games$pos)
head(games$pos, 20)
head(games$pos, 40)
head(games$pos, 50)
table(games$pos)
games$pos <- NA#
games$pos[havepat] <- gsub(pat, replacement="\\1", games$vals[havepat])
head(games)
addat$pos <- na.locf(addat$pos, na.rm=FALSE)
games$pos <- na.locf(games$pos, na.rm=FALSE)
head(games)
rm(list=ls())#
library(XML)#
library(stringr)#
library(RColorBrewer)#
library(zoo)#
username <- Sys.info()[["user"]]#
rootdir <- switch(username, #
"muschellij2" = "/Users/muschellij2/Dropbox/Classes/Biostat 750_2012/Biostat_753_2013",#
"jmuschel" = "/home/bst/student/jmuschel")#
homedir <- file.path(rootdir, "NFL_Data/")#
source(file.path(homedir, "Make_Field.R"))#
source(file.path(homedir, "Convert_pbp.R"))#
fname <- file.path(homedir, "ALL_NFL_Data.Rda")#
csvs <- list.files(path=homedir, pattern="20\\d\\d_nfl_pbp_data\\.csv", full.names=TRUE)#
nfiles <- length(csvs)#
#
load(fname)#
#
tms <- read.csv(file.path(homedir, "Teams.csv"), stringsAsFactors=FALSE, header=TRUE)#
#
load(file.path(homedir, "My_NFL_Data.Rda"))#
### renaming AFC and APR so it coincides with other ddata set#
alldat$gameid <- gsub("@NFC", "@NPR", alldat$gameid)#
alldat$gameid <- gsub("_NFC", "_NPR", alldat$gameid)#
alldat$gameid <- gsub("_AFC", "_APR", alldat$gameid)#
alldat$gameid <- gsub("@AFC", "@APR", alldat$gameid)#
alldat <- alldat[alldat$gameid != "", ]#
gm <- sort(unique(alldat$gameid))#
gm_mine <- sort(unique(ddat$gameid))#
gm_mine <- gm_mine [ substr(gm_mine, 1, 4) != "2000"]#
gm_mine <- gm_mine [ substr(gm_mine, 1, 4) != "2001"]#
if (!all(gm %in% gm_mine)) stop("MISSING GAMES!")#
## making home and away teams#
ss <- strsplit(ddat$gameid, "_")#
lss <- sapply(ss, length)#
if (!all(lss == 2)) stop("strsplit error with defense")#
ss <- sapply(ss, function(x) x[2])#
ss <- strsplit(ss, "@")#
lss <- sapply(ss, length)#
if (!all(lss == 2)) stop("strsplit error with defense")#
ss <- do.call("rbind", ss)#
ddat$home_team <- ss[,2]#
ddat$away_team <- ss[,1]#
# addat$ydline[addat$area %in% secpos & addat$qs <= 2] <- 50 + (50-addat$ydline[addat$area %in% secpos & addat$qs <= 2])#
# addat$ydline[addat$area %in% firstpos & addat$qs >= 2] <- 50 + (50-addat$ydline[addat$area %in% firstpos & addat$qs >= 2])#
### reworking where the ball is - first pass wasn't sufficient#
ss <- strsplit(ddat$vals, "  ")#
ss <- sapply(ss, function(x) {#
if (length(x) > 1) x[1]#
else NA#
})#
#
ddat$ball <- gsub("^[1-4]-(\\d|\\d\\d)-(.*)", "\\2", x=ss)#
kicks <- grepl(".*kicks .* yards from (.*) to.*", ddat$vals)#
#
ddat$ball[is.na(ddat$ball) & kicks]  <- gsub(".*kicks .* yards from (.*\\d) to.*", "\\1", x=ddat$vals[is.na(ddat$ball) & kicks])#
#
ddat$area <- sapply(strsplit(ddat$ball, " "), function(x) x[1])#
ddat$ydline <- as.numeric(sapply(strsplit(ddat$ball, " "), function(x) x[2]))#
shift <- ddat$vals#
shift <- c("", shift[1:(length(shift)-1)])#
#
### 50 yard line doesn't have the same format#
ddat$ydline[is.na(ddat$ydline) & grepl("to 50", shift)] <- 50#
poses <- ddat$area[!is.na(ddat$area)]#
firstpos <- poses[1]#
secpos <- poses[poses != firstpos]#
if (!all(poses %in% c(firstpos, secpos))) stop("More than one posession!")#
ddat$ydline[ddat$area %in% secpos & ddat$qs <= 2] <- 50 + (50-ddat$ydline[ddat$area %in% secpos & ddat$qs <= 2])#
ddat$ydline[ddat$area %in% firstpos & ddat$qs >= 2] <- 50 + (50-ddat$ydline[ddat$area %in% firstpos & ddat$qs >= 2])#
#
pos <- ddat$pos <- ddat$vals#
ddat$pos[grep("Possession: ", ddat$vals, invert=TRUE)] <- ""#
pos <- ddat$pos[ddat$pos != ""]#
ss <- strsplit(ddat$pos, " ")#
ss <- lapply(ss, function(x) {#
if(length(x) > 0) {#
c(paste(x[1], x[2]), paste(x[3], x[4]))#
} else c("","")#
})#
ss <- do.call("rbind", ss)#
ddat$away_score <- ss[,1]#
ddat$home_score <- ss[,2]#
ddat$away_score <- str_trim(ddat$away_score)#
ddat$home_score <- str_trim(ddat$home_score)#
if (! all(grepl("Plays:", pos))) stop("Possession lines are not just summaries!")#
#
ddat$ind <- 1:nrow(ddat)#
#
ord <- order(ddat$gameid, ddat$qs, ddat$ind)#
ddat <- ddat[ord, ]#
maketimes <- tapply(ddat$home_team, ddat$gameid, function(x) 1:length(x))#
ddat$playid <- unlist(maketimes)#
ddat$home_score[ddat$playid == 1] <- paste(ddat$home_team[ddat$playid == 1], "0")#
ddat$away_score[ddat$playid == 1] <- paste(ddat$away_team[ddat$playid == 1], "0")#
ddat$home_score[ddat$home_score == ""] <- NA#
ddat$away_score[ddat$away_score == ""] <- NA#
#
ddat$home_score <- na.locf(ddat$home_score)#
ddat$away_score <- na.locf(ddat$away_score)#
##20000903_ARI@NYG#
#
ddat <- ddat[!grepl("Possession: ", ddat$vals), ]#
## rework playid#
ord <- order(ddat$gameid, ddat$playid)#
ddat <- ddat[ord, ]#
maketimes <- tapply(ddat$home_team, ddat$gameid, function(x) 1:length(x))#
ddat$playid <- unlist(maketimes)#
#
## trying to take out times#
ddat$vals <- str_trim(ddat$vals)#
nc <- nchar(ddat$vals)#
#
ddat$newvals <- ddat$vals#
ddat$newvals <- gsub("\\(Timeout (\\#\\d)?.*at.*:.*\\.\\)", "", ddat$newvals)#
ddat$newvals <- gsub("Timeout (\\#\\d)?.*at.*:.*\\.", "", ddat$newvals)#
ddat$newvals <- gsub(": ", " ", ddat$newvals)#
ddat$newvals <- gsub("NOTE:", "NOTE", ddat$newvals)#
ddat$newvals <- gsub("Halftime [W|w]eather:", "Halftime Weather", ddat$newvals)#
ddat$newvals <- gsub("Weather at [H|h]alf:", "Weather at Half", ddat$newvals)#
ddat$newvals <- gsub("IND #62 - Johnson, injured on play (7:16)", "(7:16) IND #62 - Johnson, injured on play", ddat$newvals, fixed=TRUE)#
#
ddat$nn <- ddat$newvals#
ddat$newvals <- str_trim(gsub(".*(\\(.*:.+?\\))(.*)", "\\2", ddat$newvals))#
nc2 <- nchar(ddat$newvals)#
#
jump <- (nc-nc2)#
ss <- strsplit(ddat$newvals, ":")#
ls <- sapply(ss, length)#
table(ls)#
#
ddat$times <- str_trim(gsub(".*(\\(.*:.+?\\))(.*)", "\\1", ddat$nn))#
#
ddat$times <- str_trim(gsub("[\\(|\\)]", "", ddat$times))#
#
ddat$times[!grepl(":", ddat$times)] <- ""#
nc <- nchar(ddat$times)#
#
xdat <- ddat#
#
ddat <- xdat#
ddat <- ddat[!grepl("^End [O|o]f (([Qq]uarter)|([Gg]ame)|([Hh]alf)|([Rr]egulation)).*", ddat$newvals), ]#
ddat <- ddat[!grepl("^END QUARTER [1-4].*", ddat$newvals), ]#
ddat <- ddat[!grepl("^END GAME", ddat$newvals), ]#
ddat$ind <- 1:nrow(ddat)#
ord <- order(ddat$gameid, ddat$qs, ddat$ind)#
if (any(is.na(ord))) stop("Ordering is off")#
ddat <- ddat[ord, ]#
nc <- nchar(ddat$times)#
#
## make the first play minute 15#
maketimes <- unlist(t(tapply(ddat$times, list(ddat$gameid, ddat$qs), function(x) {#
x[1] <- "15:00"#
x#
})))#
ddat$times <- maketimes#
#
ddat$times[grep("^:", ddat$times)] <- paste("00", ddat$times[grep("^:", ddat$times)], sep="")#
#
ddat$qs <- as.numeric(ddat$qs)#
#
# ddat$times[ddat$times == ""] <- maketimes[ddat$times == ""]#
#
# ddat$times[ddat$times == ""] <-NA#
# ddat$times <- na.locf(ddat$times, na.rm=FALSE)#
#
## converting downs to only 1:4#
ddat$down[ddat$down %in% 0] <- NA#
table(ddat$down[!grepl("^[1-4]-(\\d|\\d\\d)-", ddat$vals)])#
ddat$down[!grepl("^[1-4]-(\\d|\\d\\d)-", ddat$vals)] <- NA#
ddat$togo[!grepl("^[1-4]-(\\d|\\d\\d)-", ddat$vals)] <- NA#
head(ddat$vals[!grepl("^[1-4]-(\\d|\\d\\d)-", ddat$vals) & !(ddat$down %in% 1:4)], 20)#
#
games <- ddat#
#
tout <- games[grepl("Timeout (\\#\\d)?.*at.*:.*\\.", games$times),]#
ncg <- nchar(games$times)#
games$times[grepl("S.Suisham extra point is GOOD, Center-L.Ladouceur, Holder-T.Romo. Rain started, 16:49.", games$times, fixed=TRUE)] <- ""#
games <- games[!grepl("5 yard run by Jacobs determined to have started after the clock reached 2:00.", games$times, fixed=TRUE),] #
games <- games[!grepl("Due to Miller injury and no timeouts resulted in the 10 second run-off.   1:40 to 1:30", games$times, fixed=TRUE),] #
games$times[grepl("J.Hanson kicks 70 yards from DET 30 to MIN 0. Be.Johnson to MIN 8 for 8 yards. FUMBLES, recovered by MIN-C.Gordon at MIN 8. C.Gordon, dead ball declared at MIN 8 for no gain. Ball down at the 8 by rule.  A fumble under 2:00 can only be returned by the fumbler.", games$times, fixed=TRUE)] <- ""#
games$times[grepl("0:37 Bennet injured on play", games$times, fixed=TRUE)] <- "00:37" #
games$times <- gsub(".* at ((\\d|\\d\\d):\\d\\d)", "\\1", games$times)#
games$times <- gsub("\\{", "", games$times)#
games$times <- gsub("\\}", "", games$times)#
games$times[grepl("Charged due to", games$times, fixed=TRUE)] <- ""#
games$times[grepl("injured player", games$times, fixed=TRUE)] <- ""#
games$times[grepl("Injury timeout", games$times, fixed=TRUE)] <- ""#
games$times[grepl("Injury within", games$times, fixed=TRUE)] <- ""#
games$times[grepl("imeout", games$times, fixed=TRUE)] <- ""#
#
ncg2 <- nchar(games$times)#
#
if (!all(ncg2 %in% c(0, 4, 5))) stop("nchar is wrong for some")#
fours <- ncg2==4#
ftime <- substr(games$times[fours], 1, 1)#
if (!all(ftime %in% 1:9)) stop("Odd Times")#
games$times[fours] <- paste("0", games$times[fours], sep="")#
## make the first play minute 15#
maketimes <- unlist(t(tapply(games$times, list(games$gameid, games$qs), function(x) {#
x[1] <- "15:00"#
x#
})))#
games$times[games$times == ""] <- maketimes[games$times == ""]#
#
games$times[games$times == ""] <- NA#
games$times <- na.locf(games$times, na.rm=FALSE)#
games$times[is.na(games$times)] <- ""#
#ss <- strsplit(games$times, ":")#
#min <- sapply(ss, function(x) ifelse(length(x) > 0, as.numeric(x[1]), NA))#
#sec <- sapply(ss, function(x) ifelse(length(x) > 1, as.numeric(substr(x[2], 1, 2)), NA))#
#games$min <- min#
#games$sec <- sec#
games$min <- as.numeric(substr(games$times, 1, 2))#
games$sec <- as.numeric(substr(games$times, 4, 5))#
if (any(is.na(games$sec) & games$times != "")) stop("Seconds are off")#
if (any(is.na(games$min) & games$times != "")) stop("Minutes are off")#
if (any(!is.na(games$sec) & is.na(games$min))) stop("Min/Sec off")#
if (any(!is.na(games$min) & is.na(games$sec))) stop("Sec/Min off")#
#
if (any( games$min > 15 | games$sec > 60)) stop("Sec/Min out of range")#
# games$min[!is.na(games$sec) & is.na(games$min)] <- 0#
# gt <- as.numeric(gsub(":", "", games$time))#
# head(test <- games[ncg > 5 & !is.na(games$min), c("vals", "newvals", "times")])#
# if (nrow(test) > 6) stop("New data with timing issues")#
# games$times[rownames(games) %in% rownames(test)] <- ""#
# games$times[rownames(games) %in% rownames(tout)] <- ""#
# games[ncg > 5, c("vals", "times")]#
# head(games$times[is.na(gt) & games$time != ""])#
#
games$down[games$down %in% 0] <- NA#
table(games$down[!grepl("^[1-4]-(\\d|\\d\\d)-", games$vals)])#
games$down[!grepl("^[1-4]-(\\d|\\d\\d)-", games$vals) & !(games$down %in% 1:4)] <- NA#
games$togo[!grepl("^[1-4]-(\\d|\\d\\d)-", games$vals) & !(games$down %in% 1:4)] <- NA#
head(games$vals[!grepl("^[1-4]-(\\d|\\d\\d)-", games$vals) & !(games$down %in% 1:4)], 20)#
#
games$vals <- gsub("Meriweather", "Merizzzz", games$vals)#
games$vals <- gsub("A.Weathers", "A.Zzzzs", games$vals, fixed=TRUE)#
games$vals <- gsub("Weatherington", "Zzzzington", games$vals, fixed=TRUE)#
games$vals <- gsub("Weatherford", "Zzzzford", games$vals, fixed=TRUE)#
games$vals <- gsub("Weatherspoon", "Zzzzspoon", games$vals, fixed=TRUE)#
#
phrases <- c("check weather", "Update on the weather: Snow began to fall.", "(Halftime weather:  76 degrees; 38% humidity; wind west at 15.)", "Weather begins to drizzle", "Weather at half 60 degrees, 17% humidity, Wind West at 22 MPH", "Weather at half: 60 degrees, 17% humidity, Wind West at 22 MPH")#
for (iphrase in phrases){#
games$vals <- str_trim(gsub(iphrase, "", games$vals, fixed=TRUE))#
games$newvals <- str_trim(gsub(iphrase, "", games$newvals, fixed=TRUE))#
}#
if (any(grepl("[W|w]eather", games$vals))) stop("Error - weather reports still there")#
#games <- games[!grepl("weather", games$vals),]#
games$vals <- gsub("Merizzzz", "Meriweather", games$vals)#
games$vals <- gsub("Zzzz", "Weather", games$vals, fixed=TRUE)#
games$vals <- gsub("zzzz", "weather", games$vals, fixed=TRUE)#
#
games$newvals <- gsub("(\\d)?\\d\\-", "", games$newvals)#
games$nn <- NULL#
#
save(games, tms, file=file.path(homedir, "Games.Rda"))
rm(list=ls())#
library(XML)#
library(stringr)#
library(RColorBrewer)#
library(zoo)#
username <- Sys.info()[["user"]]#
rootdir <- switch(username, #
"muschellij2" = "/Users/muschellij2/Dropbox/Classes/Biostat 750_2012/Biostat_753_2013",#
"jmuschel" = "/home/bst/student/jmuschel")#
homedir <- file.path(rootdir, "NFL_Data/")#
source(file.path(homedir, "Make_Field.R"))#
source(file.path(homedir, "Convert_pbp.R"))#
fname <- file.path(homedir, "Games.Rda")#
load(fname)#
#
ggg <- games
games <- ggg#
games <- games[!grepl("^\\d[st|rd|th] Quarter$", games$vals),]#
pat <- "(.*) at [0-1][0-9]:[0-5][0-9]$"#
havepat <- grepl(pat, games$vals)#
games$pos <- NA#
games$pos[havepat] <- gsub(pat, replacement="\\1", games$vals[havepat])#
games$pos <- na.locf(games$pos, na.rm=FALSE)#
games <- games[ !havepat, ]
install.packages("TractoR:")
install.packages("TractoR")
library(devtools)
install_github("https://github.com/jonclayden/tractor")
install_github
getOption("github.user")
install_github("https://github.com/jonclayden/tractor", username="muschellij2")
library(tractor)
library(tractor.base)
library(tractor.nt)
library(tractor.session)
library(tractor.utils)
help(package="tractor.base")
if (Sys.getenv("TRACTOR_HOME") == "")#
stop("TRACTOR_HOME environment variable must be set")
The full TractoR distribution must be installed, and the TRACTOR_HOME environment variable set correctly#
if (Sys.getenv("TRACTOR_HOME") == "")#
stop("TRACTOR_HOME environment variable must be set")
Sys.getenv()
Sys.Sys.getenv("SGE_TASK_ID")
Sys.getenv("SGE_TASK_ID")
Sys.getenv("TRACTOR_HOME")
Sys.setenv("TRACTOR_HOME")
Sys.setenv("TRACTOR_HOME", "/Applications/tractor")
Sys.setenv(TRACTOR_HOME ="/Applications/tractor")
The full TractoR distribution must be installed, and the TRACTOR_HOME environment variable set correctly#
if (Sys.getenv("TRACTOR_HOME") == "")#
stop("TRACTOR_HOME environment variable must be set")
Load the base package#
library("tractor.base")#
# Read an image and print its details#
i <- newMriImageFromFile(file.path(Sys.getenv("TRACTOR_HOME"), "share", "mni", "brain.nii.gz"))#
print(i)
d <- i$getData()#
class(d)            # "array"#
dim(d)              # c(91,109,91)#
i$getOrigin()       # c(46,64,37)#
# Print out the accessor functions of object "i"#
names(i)#
# Visualise and threshold the image#
createSliceGraphic(i, z=37)#
j <- newMriImageByThresholding(i, 150)#
createSliceGraphic(j, z=37)
library("tractor.session")
fslAvailable <- !is.null(getFslVersion())
fslAvailable
getFslVersion
Sys.getenv("FSLDIR")
Isosurfaces of a brain With WebGL#
## Splitting function courtesy of Duncan Murdoch#
## Open in Safari - make sure Developer -> Enable WebGL clicked#
## Should also open in Chrome (Firefox has initialization problem)#
## Can comment out datadir/outdir #
## Clear the workspace - rm(list=ls())#
require(oro.nifti) # for reading#
require(rgl) # for rendering#
require(misc3d) # for contours#
### writeWebGL_split - has add on for splitting triangles to maximum number of vertices#
### use writeIt = FALSE for knitr - just splits up triangles#
source('writeWebGL_split.R', chdir = FALSE)#
### Template from MNI152 from FSL#
template <- readNIfTI("MNI152_T1_2mm_brain.nii.gz", reorient=FALSE)#
### threshold for brain image - just the overall brain#
### make lower for smoother surface - 4500 has good mix of features#
### 1000 is smooth#
cut <- 4500#
#
dtemp <- dim(template)#
contour3d(template, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = cut, alpha = 0.1, draw = TRUE)#
#
### this would be the ``activation'' or surface you want to render #
### here just taking the upper WM from the template image#
contour3d(template, level = c(8200, 8250), alpha = c(0.5, 0.8), add = TRUE, color=c("yellow", "red"))#
text3d(x=dtemp[1]/2, y=dtemp[2]/2, z = dtemp[3]*0.98, text="Top")#
text3d(x=dtemp[1]*0.98, y=dtemp[2]/2, z = dtemp[3]/2, text="Right")#
#
### render this on a webpage!#
browseURL(paste("file://", writeWebGL_split(dir=file.path(tempdir(), "webGL"),  template = "my_template.html", width=500), sep=""))
setwd("~/Dropbox/3DPDF_Example/Example/")
Isosurfaces of a brain With WebGL#
## Splitting function courtesy of Duncan Murdoch#
## Open in Safari - make sure Developer -> Enable WebGL clicked#
## Should also open in Chrome (Firefox has initialization problem)#
## Can comment out datadir/outdir #
## Clear the workspace - rm(list=ls())#
require(oro.nifti) # for reading#
require(rgl) # for rendering#
require(misc3d) # for contours#
### writeWebGL_split - has add on for splitting triangles to maximum number of vertices#
### use writeIt = FALSE for knitr - just splits up triangles#
source('writeWebGL_split.R', chdir = FALSE)#
### Template from MNI152 from FSL#
template <- readNIfTI("MNI152_T1_2mm_brain.nii.gz", reorient=FALSE)#
### threshold for brain image - just the overall brain#
### make lower for smoother surface - 4500 has good mix of features#
### 1000 is smooth#
cut <- 4500#
#
dtemp <- dim(template)#
contour3d(template, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = cut, alpha = 0.1, draw = TRUE)#
#
### this would be the ``activation'' or surface you want to render #
### here just taking the upper WM from the template image#
contour3d(template, level = c(8200, 8250), alpha = c(0.5, 0.8), add = TRUE, color=c("yellow", "red"))#
text3d(x=dtemp[1]/2, y=dtemp[2]/2, z = dtemp[3]*0.98, text="Top")#
text3d(x=dtemp[1]*0.98, y=dtemp[2]/2, z = dtemp[3]/2, text="Right")#
#
### render this on a webpage!#
browseURL(paste("file://", writeWebGL_split(dir=file.path(tempdir(), "webGL"),  template = "my_template.html", width=500), sep=""))
template <- readNIfTI("MNI152_T1_2mm_brain.nii.gz", reorient=FALSE)
ifelse(require(brainGL), "", {
install.packages("devtools")
library(devtools)
install_github("brainGL", username="muschellij2")
}) # for knitting
ifelse(require(knitr), "", {
library(devtools)
install_github("knitr", username="yihui")
library(knitr)
}) # for knitting
ifelse(require(brainGL), invisible(NULL), {
install.packages("devtools")
library(devtools)
install_github("brainGL", username="muschellij2")
}) # for knitting
ifelse(require(knitr), invisible(NULL), {
library(devtools)
install_github("knitr", username="yihui")
library(knitr)
}) # for knitting
invisible(NULL)
x <- ifelse(require(brainGL), "", {
install.packages("devtools")
library(devtools)
install_github("brainGL", username="muschellij2")
}) # for knitting
x <- ifelse(require(knitr), "", {
library(devtools)
install_github("knitr", username="yihui")
library(knitr)
}) # for knitting
knit("Example_WebGL_Template2.Rmd")
library(knitr)
knit("Example_WebGL_Template2.Rmd")
?knit
?install_github
library(devtools)
?install_github
library(pandoc)
library(pander)
install.packages("pandoc")
source('~/.active-rstudio-document', echo=TRUE)
?pandor
?pandoc
